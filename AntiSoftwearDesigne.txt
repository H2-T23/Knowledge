
アンチソフトウェア設計

＜共通する問題点＞
	内部の修正が難しい
		→	修正、テストに時間がかかる	
		→	デグレが発生し易い（→退行テストの実施）
				→	コストが係る	


＜解決策＞
	・粒度を統一したモジュール分割
	・機能詳細の隠蔽
	・モジュール間の関係をシンプルに保つ


＜モジュールの適性性の判断・指針（ガイダンス）＞
	・サイズの適切性
	・重複が無い
	・高いコヒーション
	・独立性が高い
	・シンプルな関係性


コヒーション	：ぎ集度
ファンイン		：呼び出し
ファンアウト	：参照

○肥大化
	モジュールに多くの機能が集中している（多機能）

	・複雑度が高い
	・ファンアウト数が多い
	・コヒーションが低い

	＜対策＞
		分析モデリング
			→	モジュールの分割


○集中型
	モジュールに多くの機能が集中している（多機能）
	

	・ファンアウト数が多い
	・コヒーションが低い			

	＜対策＞
		分析モデリング
			→	モジュールの分割


○スパゲッティ
	モジュール間の呼び出し関係が複雑に絡み合っている

	・コヒーションが低い

	＜対策＞
		各モジュールのコヒーションを高くする
			→	重複を無くし、共通化を行う


○無秩序な構造
	モジュール間の関係に意味がない
		→	ハードウェアイベント依存（制御中心）

	・コヒーションが低い

	＜対策＞
		機能分割と抽象度を統一する


○物理駆動
	モジュールの流れが複数列
	論理構造がそのまま物理構造になっている




