プレゼンテーションとドメインの分離（Martin Fowler）

	最も有用な設計原則に、プログラム（UI）のプレゼンテーション層とその他の機能をうまく分ける、というのがあります。
	私はこれを発見して以来、ずっと慣行しています。
	長い間にこれを使って、いくつものメリットを発見しました。

	・プレゼンテーションロジックとドメインロジックが分かれていると理解しやすい
	・同じ基本プログラムを重複コードなしに、複数のプレゼンテーションに対応させることができる
	・UIはテストがしにくいため、それを分離することにより、テスト可能なロジック部分に集中できる
	・スクリプト用のAPIやサービスとして外部化するためのAPIを楽に追加できる
	（選択可能なプレゼンテーション部分を見つける）
	・プレゼンテーション部分のコードは、ドメイン部分のコードと違ったスキルと知識が必要


	これら多くのメリットがあるにも関わらず、この原則が破られているのをよく目にします。
	知識がないという理由もあるでしょう。フレームワークが、ドメインとプレゼンテーションを安易に
	ごちゃまぜにしてしまい、分割が困難になっているという理由もあるでしょう。

	これは、C/S型という意味ではありませんのでご注意を。
	すべてのコードが同じマシンで動いているとしても、論理的には分割した方がよいのです。

	この原則は、MVCの最も有名な箇所です。
	多く人にとってMVCとは、この分断をどのように行うかというものとなっています。

	人間ではなく、コンピュータ相手のWeb Servicesだって、プレゼンテーション部分です。
	ですから、ドメイン部分のコードとWeb Services部分のコードをごちゃまぜにしてはいけないのです。
	外部APIにしてもそうです。


Presentation Domain Sparation
	
	One of the most useful design principles that I've found and followed is that of 
	keeping a good separation between the presentaion aspects of a program(the user interface)
	and the rest of the functionality.
	Over the years where I've seen this done, I've seen plenty of benefits.

	・Presentation logic and domain logic are easier to understand when separate.
	・You can support multiple presentations on the same base program without duplicating code.
	・User Interfaces are hard to test, separation keeps more logic in more testable places.
	・You can easily add a programmatic API for scripting or exposed as services
		(I actually see these as alternative presentations).
	・Presentation code requires different skills and knowledge to domain code.

	Despite these many advantages, I often see this principle violated.
	I think this is partly due to lack of knowledge, and partly due to the fact that many frameworks make it
	much too easy to intermix domain logic into the presentation, and make it harder to maintain the separation.

	Don't make the mistake that this is a client/server physical separation.
	Even if all your code is running on the same machine, it's well worth making this logical separation.

	This principle the most prominent part of Model View Controller(MVC),
	indeed for many people MVC is how they describe this separation.

	Remember that such things as web services are also presentations, 
	even though they are used by computer users rather than human users.
	So don't intermix domain code with the ode required to support a web service,
	or indeed any other external API.


presentation:贈呈 授与 紹介 発表 演出 
domain:領域 領土 分野
principle:原理 原則 仕組み
aspect:面 見地 方位
intermix:混合
lack:不足
partly:ある程度は 少しは
due:満期の
despite:にもかかわらず
